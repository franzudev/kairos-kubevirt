variables:
  CI_DEBUG_TRACE: 
    value: ''
    description: "Verbose output of all of GitLab's output, including git cloning information. More info: https://docs.gitlab.com/ee/ci/variables/#enable-debug-logging"
  CI_SCRIPT_TRACE: 
    value: 'false'
    description: "Verbose output of CI script."
  CI_GITVERSION_TRACE: 
    value: 'true'
    description: "Gitversion config emited and verbosity set. Default to true in the Guided Exploration for learning purposes."
  SECURE_LOG_LEVEL: 
    value: ''
    description: "Set to one of: 'fatal,warn,error,info,debug' More info: https://docs.gitlab.com/ee/user/application_security/sast/#logging-level"
  TRACE: 
    value: ''
    description: "Set to 1 to output helm trace commands. More Info: https://docs.gitlab.com/ee/topics/autodevops/customize.html#cicd-variables" 
  PACKAGENAME: $CI_PROJECT_NAME

  #https://docs.gitlab.com/ee/topics/git/useful_git_commands.html#debugging-with-git-embedded-traces
  GIT_CURL_VERBOSE:
    value: ''
    description: 'Set to 1 to enable tracing of git https operations. More info: https://docs.gitlab.com/ee/topics/git/useful_git_commands.html#debugging-with-git-embedded-traces'
  GIT_TRACE_PERFORMANCE:
    value: ''
    description: 'Set to 1 to enable tracing of performance data, showing how long each particular git invocation takes More info: https://docs.gitlab.com/ee/topics/git/useful_git_commands.html#debugging-with-git-embedded-traces'
  GIT_TRACE_SETUP:
    value: ''
    description: 'Set to 1 to enable tracing of what git is discovering about the repository and environment itâ€™s interacting with. More info: https://docs.gitlab.com/ee/topics/git/useful_git_commands.html#debugging-with-git-embedded-traces'
  GIT_TRACE_PACKET:
    value: ''
    description: 'Set to 1 to enable tracing packet-level tracing for network operations. More info: https://docs.gitlab.com/ee/topics/git/useful_git_commands.html#debugging-with-git-embedded-traces'    


stages:
  - .pre
  - build
  - test
  - release

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG'
      when: never
    - if: $CI_COMMIT_BRANCH
      when: always
      
#use this include syntax to refer to from other projects on the same GitLab instance (which makes it a CI CD Plugin usable across your projects):
#include:  
#  - project: 'guided-explorations/devops-patterns/utterly-automated-versioning'
#    file: '/gitversion-ci-cd-plugin-extension.gitlab-ci.yml'
#    ref: v0.1.2  #optional version pegging

include:
  - local: '/gitversion-ci-cd-plugin-extension.gitlab-ci.yml' 

determineversion:
  extends: .gitversion_function

docker_create_image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - |  
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
      #Build date for opencontainers
      BUILDDATE="'$(date '+%FT%T%z' | sed -E -n 's/(\+[0-9]{2})([0-9]{2})$/\1:\2/p')'" #rfc 3339 date
      IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.created=$BUILDDATE --label build-date=$BUILDDATE"
      #Description for opencontainers
      BUILDTITLE=$(echo $CI_PROJECT_TITLE | tr " " "_")
      IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.title=$BUILDTITLE --label org.opencontainers.image.description=$BUILDTITLE"
      #Add ref.name for opencontainers
      IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.ref.name=$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"

      #Build Version Label and Tag from git tag, LastVersionTagInGit was placed by a previous job artifact
      IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.version=$GitVersion_LegacySemVer"
      ADDITIONALTAGLIST="$ADDITIONALTAGLIST $GitVersion_LegacySemVer"
      
      ADDITIONALTAGLIST="$ADDITIONALTAGLIST $CI_COMMIT_REF_NAME $CI_COMMIT_SHORT_SHA"
      if [[ "$CI_COMMIT_REF_NAME" == "main" ]]; then ADDITIONALTAGLIST="$ADDITIONALTAGLIST latest"; fi
      if [[ -n "$ADDITIONALTAGLIST" ]]; then 
        for TAG in $ADDITIONALTAGLIST; do 
          FORMATTEDTAGLIST="${FORMATTEDTAGLIST} --tag $CI_REGISTRY_IMAGE:$TAG "; 
        done; 
      fi

      echo $FORMATTEDTAGLIST
      echo $IMAGE_LABELS

      docker build $IMAGE_LABELS --pull $FORMATTEDTAGLIST -f stage/Dockerfile .

      if [[ $CI_COMMIT_REF_PROTECTED == "false" ]]; then
        echo "To prevent clutter, containers are not pushed or download tested unless the branch is protected."
      else
        echo "Pushing container to registry."  

        if [[ -n "$ADDITIONALTAGLIST" ]]; then 
          for TAG in $ADDITIONALTAGLIST; do 
            docker push "$CI_REGISTRY_IMAGE:$TAG"
            echo "Image can be pulled with the reference: $CI_REGISTRY_IMAGE:$TAG"
          done; 
        fi
      fi

create_kairos_iso:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - |

  artifacts:
    paths:
      - '*.tar.gz'

generic_download_test:
  stage: test
  image: bash:latest
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_REF_PROTECTED != "false"'   
  script:
    - |
      if [[ "${CI_SCRIPT_TRACE}" == "true" ]] || [[ -n "${CI_DEBUG_TRACE}" ]]; then
        echo "Debugging enabled"
        set -xv
      fi    
      apk add wget curl
      wget --header="JOB-TOKEN: $CI_JOB_TOKEN" ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGENAME}/${GitVersion_LegacySemVer}/${PACKAGENAME}.${GitVersion_LegacySemVer}.tar.gz
      tar -xzvf ${PACKAGENAME}.${GitVersion_LegacySemVer}.tar.gz
      ls -ashl
      echo "Contents of version.txt:"
      cat version.txt

dotnetcli_create_package:
  image: mcr.microsoft.com/dotnet/sdk:5.0
  stage: build
  script:
    - |
      echo "This example builds a nuget packaged with dotnet CLI"
      echo "Reference for building .nuspecs from dotnet cli: https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets#packing-using-a-nuspec"
      if [[ "${CI_SCRIPT_TRACE}" == "true" ]] || [[ -n "${CI_DEBUG_TRACE}" ]]; then
        echo "Debugging enabled"
        set -xv
      fi 
      cat << EndOfNuspec > $CI_PROJECT_NAME.nuspec
      <?xml version="1.0" encoding="utf-8"?>
      <package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
        <metadata>
        <id>$CI_PROJECT_NAME-dotnetcli</id>
        <version>${GitVersion_LegacySemVer}</version>
        <authors>My Company</authors>
        <description>My test package described in detail</description>
        </metadata>
        <files>
          <!-- Add version.txt -->
          <file src="version.txt" target="" />
        </files>
       </package>
      EndOfNuspec

      cat << EndOfCsproj > $CI_PROJECT_NAME.csproj
      <Project Sdk="Microsoft.NET.Sdk">
        <PropertyGroup>
          <TargetFramework>net5.0</TargetFramework>
          <NoBuild>true</NoBuild>
          <IncludeBuildOutput>false</IncludeBuildOutput>
          <NuspecFile>$CI_PROJECT_NAME.nuspec</NuspecFile>
          <NuspecProperties></NuspecProperties>
        </PropertyGroup>
      </Project>
      EndOfCsproj

      echo "${GitVersion_LegacySemVer}" > version.txt
      
      dotnet pack -t:pack $CI_PROJECT_NAME.csproj -p:NuspecFile=$CI_PROJECT_NAME.nuspec
      dotnet nuget add source "$CI_SERVER_URL/api/v4/projects/$CI_PROJECT_ID/packages/nuget/index.json" --name gitlab --username gitlab-ci-token --password $CI_JOB_TOKEN --store-password-in-clear-text
    
      if [[ $CI_COMMIT_REF_PROTECTED == "false" ]]; then
        echo "To prevent clutter, packages are not pushed or download tested unless the branch is protected - they are available in job artifacts for inspection."
      else
        echo "Pushing package to registry."
        dotnet nuget push "bin/Debug/*.nupkg" --source gitlab
      fi
  #These are only collected for debugging
  artifacts:
    paths:
      - $CI_PROJECT_NAME.csproj
      - $CI_PROJECT_NAME.nuspec
      - bin/Debug/*.nupkg

dotnetcli_download_test:
  image: mcr.microsoft.com/dotnet/sdk:5.0
  stage: test
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_REF_PROTECTED != "false"'    
  script:
    - |
      echo "This example builds a nuget packaged with dotnet CLI"
      echo "Reference for building .nuspecs from dotnet cli: https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets#packing-using-a-nuspec"
      if [[ "${CI_SCRIPT_TRACE}" == "true" ]] || [[ -n "${CI_DEBUG_TRACE}" ]]; then
        echo "Debugging enabled"
        set -xv
      fi 
      cat << EOFcsproj > ./MinimalProjectFile.csproj
      <Project Sdk="Microsoft.NET.Sdk">
        <PropertyGroup>
          <TargetFrameworks>net5.0</TargetFrameworks>
        </PropertyGroup>
      </Project>
      EOFcsproj

      if [[ "$CI_COMMIT_BRANCH" != "main" ]]; then
        PRERELEASEARG="--prerelease"
      fi

      dotnet nuget add source "$CI_SERVER_URL/api/v4/projects/$CI_PROJECT_ID/packages/nuget/index.json" --name gitlab --username gitlab-ci-token --password $CI_JOB_TOKEN --store-password-in-clear-text
      dotnet add MinimalProjectFile.csproj package $CI_PROJECT_NAME-dotnetcli --package-directory $CI_PROJECT_DIR -v ${GitVersion_LegacySemVer} $PRERELEASERG
      echo "Contents of version.txt:"
      find . -type f -name version.txt -exec cat {} \;

nugetcli_create_package:
  image: mono
  stage: build
  script:
    - |
      if [[ "${CI_SCRIPT_TRACE}" == "true" ]] || [[ -n "${CI_DEBUG_TRACE}" ]]; then
        echo "Debugging enabled"
        set -xv
      fi 
      cat << EndOfNuspec > $CI_PROJECT_NAME.nuspec
      <?xml version="1.0" encoding="utf-8"?>
      <package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
        <metadata>
        <id>$CI_PROJECT_NAME-nugetcli</id>
        <version>${GitVersion_LegacySemVer}</version>
        <authors>My Company</authors>
        <description>My test package described in detail</description>
        </metadata>
        <files>
          <!-- Add version.txt -->
          <file src="version.txt" target="" />
        </files>
       </package>
      EndOfNuspec

      echo "${GitVersion_LegacySemVer}" > version.txt
      
      nuget pack $CI_PROJECT_NAME.nuspec
      nuget source add -source "$CI_SERVER_URL/api/v4/projects/$CI_PROJECT_ID/packages/nuget/index.json" -name gitlab -username gitlab-ci-token -password $CI_JOB_TOKEN -StorePasswordInClearText
      if [[ $CI_COMMIT_REF_PROTECTED == "false" ]]; then
        echo "To prevent clutter, packages are not pushed or download tested unless the branch is protected - they are available in job artifacts for inspection."
      else
        echo "Pushing package to registry."      
        nuget push "*.nupkg" -source gitlab -nosymbols
      fi
  #These are only collected for debugging
  artifacts:
    paths:
      - $CI_PROJECT_NAME.nuspec
      - '*.nupkg'

nugetcli_download_test:
  image: mono
  stage: test
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_REF_PROTECTED != "false"'  
  script:
    - |
      if [[ "${CI_SCRIPT_TRACE}" == "true" ]] || [[ -n "${CI_DEBUG_TRACE}" ]]; then
        echo "Debugging enabled"
        set -xv
      fi

      if [[ "$CI_COMMIT_BRANCH" != "main" ]]; then
        PRERELEASEARG="-prerelease"
      fi      

      nuget source add -source "$CI_SERVER_URL/api/v4/projects/$CI_PROJECT_ID/packages/nuget/index.json" -name gitlab -username gitlab-ci-token -password $CI_JOB_TOKEN -StorePasswordInClearText
      nuget install -source gitlab $CI_PROJECT_NAME-nugetcli -version ${GitVersion_LegacySemVer} $PRERELEASEARG
      find . -type f -name version.txt
      echo "Contents of version.txt:"
      find . -type f -name version.txt -exec cat {} \;

# Please see [Release CI/CD examples](https://docs.gitlab.com/ee/user/project/releases/release_cicd_examples.html) for many rich examples for triggering a release only on specific conditions.
do_gitlab_release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_REF_PROTECTED != "false"'
      #This last rule will do a release for any protected branch. Literal branch names can be used if desired.

  script:
    - > 
      release-cli create --name ${GitVersion_LegacySemVer} --description $CI_COMMIT_REF_NAME-$CI_JOB_ID
      --tag-name ${GitVersion_LegacySemVer} --ref $CI_COMMIT_SHA
      --assets-link "{\"name\":\"Packaged Artifact\",\"url\":\"${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGENAME}/${GitVersion_LegacySemVer}/${PACKAGENAME}.${GitVersion_LegacySemVer}.tar.gz\"}"
